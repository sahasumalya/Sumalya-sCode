using namespace std;
#include<iostream>
#include<list>
class Graph{
	int V;
	list<int> *adj;
	public:
		int *weight,**edge,*vr;
		Graph(int v);
		void addEdge(int p,int q,int r);
		void Bell(int s);
};
Graph::Graph(int v)
{
	this->V=v;
	weight=new int[V];
	vr=new int[V];
	edge=new int*[V];
	adj=new list<int>[V];
	for(int i=0;i<V;i++)
	{
	
	edge[i]=new int[V];
	weight[i]=999;
	vr[i]=0;
	for(int j=0;j<V;j++)
	edge[i][j]=999;
}
	
}
void Graph::addEdge(int p,int q,int r)
{
	adj[p].push_back(q);
	edge[p][q]=r;
	vr[p]=1;
}
void Graph::Bell(int s)
{
	int parent[V];
	for(int f=0;f<V;f++)
	parent[f]=-1;
	weight[s]=0;
	list<int>::iterator k;
	for(int i=0;i<V-1;i++)
	{
		//cout<<"outer";
			for(int j=0;j<V;j++)
			{
				//cout<<"inner";
				if(vr[j]==1)
				{
			//	cout<<"if";
				
				for(k=adj[j].begin();k!=adj[j].end();++k)
				{
					if(weight[*k]>weight[j]+edge[j][*k])
					{
				//	cout<<"if1";
					weight[*k]=weight[j]+edge[j][*k];
				//	cout<<"if2";
					parent[*k]=j;
				//	cout<<"if3";
					
				}
				}
			}
			 	
			}
		
	}
//	cout<<"hiii";
	for(int x=0;x<V;x++)
	cout<<weight[x]<<"\n";
	for(int x=0;x<V;x++)
	{
		if(x!=s)
		{
			int z=x,con=0;
			cout<<x<<"--";
			while(con<V)
			{
				con++;
				cout<<parent[z]<<"--";
				z=parent[z];
				if(z==s)
				break;
				
			}
		}
		cout<<"\n";
	}
	
}
int main()
{
	Graph g(5);
	g.addEdge(0, 1, -1);////creating the graph(arg1 joining to arg2 with weight arg3)
	g.addEdge(0, 2, 4);
	g.addEdge(1, 2, 3);
	g.addEdge(1, 3, 2);
	g.addEdge(1, 4, 2);
	g.addEdge(3, 1, 1);
	g.addEdge(3, 2, 5);
	g.addEdge(4, 3, -3);
	


	cout << "Following is Breadth First Traversal "
		<< "(starting from vertex 2) \n";
	g.Bell(0);////selecting the source node.Here it is zero.

	return 0;
	
}


